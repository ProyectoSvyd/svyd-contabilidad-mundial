@page "/asientos"
@using ContabilidadMundial.Data
@using ContabilidadMundial.Models
@using Microsoft.EntityFrameworkCore
@inject ContabilidadContext Context

<PageTitle>Asientos Contables - Contabilidad Mundial</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    <i class="bi bi-journal-text"></i>
                    Asientos Contables
                </h1>
                <button class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i>
                    Nuevo Asiento
                </button>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="row mb-3">
        <div class="col-md-3">
            <select class="form-select" @bind="empresaSeleccionada" @bind:after="CargarAsientosAsync">
                <option value="">Todas las empresas</option>
                @foreach (var empresa in empresas)
                {
                    <option value="@empresa.Id">@empresa.Nombre</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <select class="form-select" @bind="estadoFiltro" @bind:after="FiltrarAsientos">
                <option value="">Todos los estados</option>
                <option value="Borrador">Borrador</option>
                <option value="Contabilizado">Contabilizado</option>
                <option value="Anulado">Anulado</option>
            </select>
        </div>
        <div class="col-md-2">
            <input type="date" class="form-control" @bind="fechaDesde" @bind:after="FiltrarAsientos">
        </div>
        <div class="col-md-2">
            <input type="date" class="form-control" @bind="fechaHasta" @bind:after="FiltrarAsientos">
        </div>
        <div class="col-md-3">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Buscar asiento..." @bind="textoBusqueda" @bind:after="FiltrarAsientos">
                <button class="btn btn-outline-secondary" type="button" @onclick="LimpiarFiltros">
                    <i class="bi bi-x-circle"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Tabla de asientos -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    @if (asientosFiltrados?.Count > 0)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>NÃºmero</th>
                                        <th>Fecha</th>
                                        <th>Concepto</th>
                                        <th>Empresa</th>
                                        <th>Sucursal</th>
                                        <th>Total</th>
                                        <th>Estado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var asiento in asientosFiltrados)
                                    {
                                        <tr>
                                            <td>
                                                <code class="text-primary">@asiento.Numero</code>
                                            </td>
                                            <td>@asiento.Fecha.ToString("dd/MM/yyyy")</td>
                                            <td>
                                                <strong>@asiento.Concepto</strong>
                                                @if (!string.IsNullOrEmpty(asiento.NumeroDocumento))
                                                {
                                                    <br><small class="text-muted">Doc: @asiento.NumeroDocumento</small>
                                                }
                                            </td>
                                            <td>
                                                <small>@asiento.Empresa?.Nombre</small>
                                            </td>
                                            <td>
                                                <small>@asiento.Sucursal?.Nombre</small>
                                            </td>
                                            <td class="text-end">
                                                <strong>@asiento.TotalDebito.ToString("C")</strong>
                                            </td>
                                            <td>
                                                <span class="badge @GetEstadoBadgeClass(asiento.Estado)">
                                                    @asiento.Estado
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" title="Editar">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-info" title="Ver detalles">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                    @if (asiento.Estado == "Borrador")
                                                    {
                                                        <button class="btn btn-sm btn-outline-success" title="Contabilizar">
                                                            <i class="bi bi-check-circle"></i>
                                                        </button>
                                                    }
                                                    <button class="btn btn-sm btn-outline-danger" title="Anular">
                                                        <i class="bi bi-x-circle"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Resumen -->
                        <div class="row mt-3">
                            <div class="col-md-8">
                                <small class="text-muted">
                                    Mostrando @asientosFiltrados.Count de @totalAsientos asientos
                                </small>
                            </div>
                            <div class="col-md-4 text-end">
                                <small class="text-muted">
                                    Total: <strong>@asientosFiltrados.Sum(a => a.TotalDebito).ToString("C")</strong>
                                </small>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-journal-x" style="font-size: 3rem; color: #ccc;"></i>
                            <h4 class="mt-3 text-muted">No hay asientos contables</h4>
                            <p class="text-muted">No se encontraron asientos que coincidan con los filtros aplicados.</p>
                            <button class="btn btn-primary">
                                <i class="bi bi-plus-circle"></i>
                                Crear primer asiento
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Empresa> empresas = new();
    private List<AsientoContable> todosLosAsientos = new();
    private List<AsientoContable> asientosFiltrados = new();
    
    private string empresaSeleccionada = "";
    private string estadoFiltro = "";
    private string textoBusqueda = "";
    private DateTime? fechaDesde;
    private DateTime? fechaHasta;
    private int totalAsientos = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosAsync();
    }

    private async Task CargarDatosAsync()
    {
        try
        {
            empresas = await Context.Empresas
                .Where(e => e.Activa)
                .OrderBy(e => e.Nombre)
                .ToListAsync();

            await CargarAsientosAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando datos: {ex.Message}");
        }
    }

    private async Task CargarAsientosAsync()
    {
        try
        {
            var query = Context.AsientosContables
                .Include(a => a.Empresa)
                .Include(a => a.Sucursal)
                .AsQueryable();

            if (!string.IsNullOrEmpty(empresaSeleccionada))
            {
                if (int.TryParse(empresaSeleccionada, out int empresaId))
                {
                    query = query.Where(a => a.EmpresaId == empresaId);
                }
            }

            todosLosAsientos = await query
                .OrderByDescending(a => a.Fecha)
                .ThenByDescending(a => a.Numero)
                .ToListAsync();

            totalAsientos = todosLosAsientos.Count;
            FiltrarAsientos();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando asientos: {ex.Message}");
        }
    }

    private void FiltrarAsientos()
    {
        var query = todosLosAsientos.AsQueryable();

        if (!string.IsNullOrEmpty(estadoFiltro))
        {
            query = query.Where(a => a.Estado == estadoFiltro);
        }

        if (fechaDesde.HasValue)
        {
            query = query.Where(a => a.Fecha >= fechaDesde.Value);
        }

        if (fechaHasta.HasValue)
        {
            query = query.Where(a => a.Fecha <= fechaHasta.Value);
        }

        if (!string.IsNullOrEmpty(textoBusqueda))
        {
            var busqueda = textoBusqueda.ToLower();
            query = query.Where(a => 
                a.Numero.ToLower().Contains(busqueda) ||
                a.Concepto.ToLower().Contains(busqueda) ||
                (a.NumeroDocumento != null && a.NumeroDocumento.ToLower().Contains(busqueda))
            );
        }

        asientosFiltrados = query.ToList();
        StateHasChanged();
    }

    private void LimpiarFiltros()
    {
        empresaSeleccionada = "";
        estadoFiltro = "";
        textoBusqueda = "";
        fechaDesde = null;
        fechaHasta = null;
        FiltrarAsientos();
    }

    private string GetEstadoBadgeClass(string estado)
    {
        return estado switch
        {
            "Borrador" => "bg-warning",
            "Contabilizado" => "bg-success",
            "Anulado" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}