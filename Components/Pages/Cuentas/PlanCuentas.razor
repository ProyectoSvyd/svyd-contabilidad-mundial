@page "/cuentas"
@using ContabilidadMundial.Data
@using ContabilidadMundial.Models
@using Microsoft.EntityFrameworkCore
@inject ContabilidadContext Context

<PageTitle>Plan de Cuentas - Contabilidad Mundial</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    <i class="bi bi-list-ul"></i>
                    Plan de Cuentas
                </h1>
                <button class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i>
                    Nueva Cuenta
                </button>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="row mb-3">
        <div class="col-md-4">
            <select class="form-select" @bind="empresaSeleccionada" @bind:after="CargarCuentasAsync">
                <option value="">Todas las empresas</option>
                @foreach (var empresa in empresas)
                {
                    <option value="@empresa.Id">@empresa.Nombre</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="tipoFiltro" @bind:after="FiltrarCuentas">
                <option value="">Todos los tipos</option>
                <option value="Activo">Activos</option>
                <option value="Pasivo">Pasivos</option>
                <option value="Patrimonio">Patrimonio</option>
                <option value="Ingreso">Ingresos</option>
                <option value="Gasto">Gastos</option>
            </select>
        </div>
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Buscar cuenta..." @bind="textoBusqueda" @bind:after="FiltrarCuentas">
                <button class="btn btn-outline-secondary" type="button" @onclick="LimpiarFiltros">
                    <i class="bi bi-x-circle"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Tabla de cuentas -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    @if (cuentasFiltradas?.Count > 0)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Código</th>
                                        <th>Nombre</th>
                                        <th>Tipo</th>
                                        <th>Naturaleza</th>
                                        <th>Nivel</th>
                                        <th>Movimientos</th>
                                        <th>Estado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var cuenta in cuentasFiltradas)
                                    {
                                        <tr>
                                            <td>
                                                <code class="text-primary">@cuenta.Codigo</code>
                                            </td>
                                            <td>
                                                <div style="margin-left: @(cuenta.Nivel * 20)px;">
                                                    @if (cuenta.Nivel > 1)
                                                    {
                                                        <i class="bi bi-arrow-return-right text-muted me-1"></i>
                                                    }
                                                    <strong>@cuenta.Nombre</strong>
                                                </div>
                                                @if (!string.IsNullOrEmpty(cuenta.Descripcion))
                                                {
                                                    <small class="text-muted d-block" style="margin-left: @(cuenta.Nivel * 20)px;">
                                                        @cuenta.Descripcion
                                                    </small>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge @GetBadgeClass(cuenta.TipoCuenta)">
                                                    @cuenta.TipoCuenta
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge @(cuenta.Naturaleza == "Débito" ? "bg-info" : "bg-warning")">
                                                    @cuenta.Naturaleza
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">Nivel @cuenta.Nivel</span>
                                            </td>
                                            <td>
                                                @if (cuenta.AceptaMovimientos)
                                                {
                                                    <i class="bi bi-check-circle text-success" title="Acepta movimientos"></i>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-x-circle text-muted" title="No acepta movimientos"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (cuenta.Activa)
                                                {
                                                    <span class="badge bg-success">Activa</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Inactiva</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" title="Editar">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-info" title="Ver detalles">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" title="Eliminar">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Paginación -->
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <div>
                                <small class="text-muted">
                                    Mostrando @cuentasFiltradas.Count de @totalCuentas cuentas
                                </small>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-inbox" style="font-size: 3rem; color: #ccc;"></i>
                            <h4 class="mt-3 text-muted">No hay cuentas contables</h4>
                            <p class="text-muted">No se encontraron cuentas que coincidan con los filtros aplicados.</p>
                            <button class="btn btn-primary">
                                <i class="bi bi-plus-circle"></i>
                                Crear primera cuenta
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Empresa> empresas = new();
    private List<CuentaContable> todasLasCuentas = new();
    private List<CuentaContable> cuentasFiltradas = new();
    
    private string empresaSeleccionada = "";
    private string tipoFiltro = "";
    private string textoBusqueda = "";
    private int totalCuentas = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosAsync();
    }

    private async Task CargarDatosAsync()
    {
        try
        {
            empresas = await Context.Empresas
                .Where(e => e.Activa)
                .OrderBy(e => e.Nombre)
                .ToListAsync();

            await CargarCuentasAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando datos: {ex.Message}");
        }
    }

    private async Task CargarCuentasAsync()
    {
        try
        {
            var query = Context.CuentasContables
                .Include(c => c.Empresa)
                .Include(c => c.CuentaPadre)
                .AsQueryable();

            if (!string.IsNullOrEmpty(empresaSeleccionada))
            {
                if (int.TryParse(empresaSeleccionada, out int empresaId))
                {
                    query = query.Where(c => c.EmpresaId == empresaId);
                }
            }

            todasLasCuentas = await query
                .OrderBy(c => c.Codigo)
                .ToListAsync();

            totalCuentas = todasLasCuentas.Count;
            FiltrarCuentas();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando cuentas: {ex.Message}");
        }
    }

    private void FiltrarCuentas()
    {
        var query = todasLasCuentas.AsQueryable();

        if (!string.IsNullOrEmpty(tipoFiltro))
        {
            query = query.Where(c => c.TipoCuenta == tipoFiltro);
        }

        if (!string.IsNullOrEmpty(textoBusqueda))
        {
            var busqueda = textoBusqueda.ToLower();
            query = query.Where(c => 
                c.Codigo.ToLower().Contains(busqueda) ||
                c.Nombre.ToLower().Contains(busqueda) ||
                (c.Descripcion != null && c.Descripcion.ToLower().Contains(busqueda))
            );
        }

        cuentasFiltradas = query.ToList();
        StateHasChanged();
    }

    private void LimpiarFiltros()
    {
        empresaSeleccionada = "";
        tipoFiltro = "";
        textoBusqueda = "";
        FiltrarCuentas();
    }

    private string GetBadgeClass(string tipoCuenta)
    {
        return tipoCuenta switch
        {
            "Activo" => "bg-success",
            "Pasivo" => "bg-danger",
            "Patrimonio" => "bg-primary",
            "Ingreso" => "bg-info",
            "Gasto" => "bg-warning",
            _ => "bg-secondary"
        };
    }
}